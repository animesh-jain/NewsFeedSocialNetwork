package Personal.NewsFeedSocialNetwork;
// Generated by CodiumAI

import Personal.NewsFeedSocialNetwork.dao.InterestDao;
import Personal.NewsFeedSocialNetwork.enums.Topic;
import Personal.NewsFeedSocialNetwork.model.UserInterest;
import Personal.NewsFeedSocialNetwork.service.InterestService;
import java.util.List;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class InterestServiceTest {

	@Mock
	InterestDao interestDao;

	@InjectMocks
	InterestService interestService;

	@BeforeEach
	public void setUp() {
		MockitoAnnotations.initMocks(this); // Initialize Mockito annotations
	}

	// Saving a single user interest with valid user ID and topic should return the saved UserInterest object
	@Test
	public void test_save_single_user_interest() {
		// Arrange
		Long userId = 1L;
		Topic topic = Topic.POLITICS_AND_GOVERNMENT;
		UserInterest expectedInterest = UserInterest.builder()
		                                            .id(1L)
		                                            .userId(userId)
		                                            .topic(topic)
		                                            .build();
		Mockito.when(interestDao.save(Mockito.any(UserInterest.class))).thenReturn(expectedInterest);

		// Act
		UserInterest result = interestService.saveUserInterests(userId, topic);

		// Assert
		assertEquals(expectedInterest, result);
	}

	// Saving multiple user interests with valid user ID and topics should return a list of saved UserInterest objects
	@Test
	public void test_save_multiple_user_interests() {
		// Arrange
		Long userId = 1L;
		List<Topic> topics = List.of(Topic.POLITICS_AND_GOVERNMENT, Topic.ECONOMY_AND_FINANCE);
		List<UserInterest> expectedInterests = List.of(UserInterest.builder()
		                                                           .id(1L)
		                                                           .userId(userId)
		                                                           .topic(Topic.POLITICS_AND_GOVERNMENT)
		                                                           .build(),
			UserInterest.builder()
			            .id(2L)
			            .userId(userId)
			            .topic(Topic.ECONOMY_AND_FINANCE)
			            .build());
		Mockito.when(interestDao.saveAll(Mockito.anyList())).thenReturn(expectedInterests);

		// Act
		List<UserInterest> result = interestService.bulkSaveUserInterests(userId, topics);

		// Assert
		assertEquals(expectedInterests, result);
	}

	// Saving user interests with different topics and user IDs should return the correct UserInterest objects
	@Test
	public void test_save_user_interests_different_topics_and_user_ids() {
		// Arrange
		Long userId1 = 1L;
		Long userId2 = 2L;
		Topic topic1 = Topic.POLITICS_AND_GOVERNMENT;
		Topic topic2 = Topic.ECONOMY_AND_FINANCE;
		UserInterest expectedInterest1 = UserInterest.builder()
		                                             .id(1L)
		                                             .userId(userId1)
		                                             .topic(topic1)
		                                             .build();
		UserInterest expectedInterest2 = UserInterest.builder()
		                                             .id(2L)
		                                             .userId(userId2)
		                                             .topic(topic2)
		                                             .build();
		Mockito.when(interestDao.save(Mockito.any(UserInterest.class))).thenReturn(expectedInterest1, expectedInterest2);

		// Act
		UserInterest result1 = interestService.saveUserInterests(userId1, topic1);
		UserInterest result2 = interestService.saveUserInterests(userId2, topic2);

		// Assert
		assertEquals(expectedInterest1, result1);
		assertEquals(expectedInterest2, result2);
	}

	// Saving a user interest with a non-existent user ID should throw an exception
	@Test
	public void test_save_user_interest_nonexistent_user_id() {
		// Arrange
		Long userId = 999L;
		Topic topic = Topic.POLITICS_AND_GOVERNMENT;
		Mockito.when(interestDao.save(Mockito.any(UserInterest.class))).thenThrow(new IllegalArgumentException("User not found"));

		// Act and Assert
		assertThrows(IllegalArgumentException.class, () -> interestService.saveUserInterests(userId, topic));
	}

}