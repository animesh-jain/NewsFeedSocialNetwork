package Personal.NewsFeedSocialNetwork;
// Generated by CodiumAI

import Personal.NewsFeedSocialNetwork.dao.EventDao;
import Personal.NewsFeedSocialNetwork.dao.RelationshipDao;
import Personal.NewsFeedSocialNetwork.dao.UserStoryDao;
import Personal.NewsFeedSocialNetwork.enums.RelationshipStatus;
import Personal.NewsFeedSocialNetwork.model.Event;
import Personal.NewsFeedSocialNetwork.model.UserStory;
import Personal.NewsFeedSocialNetwork.service.UserService;
import Personal.NewsFeedSocialNetwork.service.UserStoryService;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.when;

public class GetFriendsStoryTest {

	@Mock
	RelationshipDao relationshipDao;

	@Mock
	UserStoryDao userStoryDao;

	@Mock
	EventDao eventDao;

	@InjectMocks
	UserStoryService userStoryService;

	@BeforeEach
	public void setUp() {
		MockitoAnnotations.initMocks(this); // Initialize Mockito annotations
	}

	// Returns a list of UserStory objects for a given user ID with accepted relationships
	@Test
	public void test_getFriendsStory_returnsListOfUserStoryObjectsForGivenUserIdWithAcceptedRelationships() {
		// Arrange
		Long userId = 1L;
		List<Long> friendUserIds = Arrays.asList(2L, 3L);
		List<UserStory> expectedUserStories = Arrays.asList(
			UserStory
				.builder().id(1L).userId(2L).eventId(1L).comment("Comment 1").duration(1).active(true).build(),
			UserStory.builder().id(2L).userId(3L).eventId(2L).comment("Comment 2").duration(2).active(true).build()
		                                                   );
		when(relationshipDao.findAllFriendUserIdByUserIdAndRelationshipStatus(userId, RelationshipStatus.ACCEPTED)).thenReturn(friendUserIds);
		when(userStoryDao.findAllByUserIdInAndActive(friendUserIds, true)).thenReturn(expectedUserStories);
		when(eventDao.findById(anyLong())).thenReturn(
			Optional.of(Event.builder().id(1L).name("Event 1").build()), Optional.of(Event.builder().id(2L).name("Event 2").build()));

		// Act
		List<UserStory> actualUserStories = userStoryService.getFriendsStory(userId);

		// Assert
		assertEquals(expectedUserStories, actualUserStories);
	}

	// Returns an empty list when the user has no friends or no friends with accepted relationships
	@Test
	public void test_getFriendsStory_returnsEmptyListWhenUserHasNoFriendsOrNoFriendsWithAcceptedRelationships() {
		// Arrange
		Long userId = 1L;
		List<Long> friendUserIds = Collections.emptyList();
		List<UserStory> expectedUserStories = Collections.emptyList();
		when(relationshipDao.findAllFriendUserIdByUserIdAndRelationshipStatus(userId, RelationshipStatus.ACCEPTED)).thenReturn(friendUserIds);

		// Act
		List<UserStory> actualUserStories = userStoryService.getFriendsStory(userId);

		// Assert
		assertEquals(expectedUserStories, actualUserStories);
	}

	// Sets the 'active' field of UserStory objects to true
	@Test
	public void test_getFriendsStory_setsActiveFieldOfUserStoryObjectsToTrue() {
		// Arrange
		Long userId = 1L;
		List<Long> friendUserIds = Arrays.asList(2L, 3L);
		List<UserStory> expectedUserStories = Arrays.asList(
			UserStory.builder().id(1L).userId(2L).eventId(1L).comment("Comment 1").duration(1).active(true).build(),
			UserStory.builder().id(2L).userId(3L).eventId(2L).comment("Comment 2").duration(2).active(true).build()
		                                                   );
		when(relationshipDao.findAllFriendUserIdByUserIdAndRelationshipStatus(userId, RelationshipStatus.ACCEPTED)).thenReturn(friendUserIds);
		when(userStoryDao.findAllByUserIdInAndActive(friendUserIds, true)).thenReturn(expectedUserStories);
		when(eventDao.findById(anyLong())).thenReturn(Optional.of(Event.builder().id(1L).name("Event 1").build()), Optional.of(Event.builder().id(2L).name("Event 2").build()));

		// Act
		List<UserStory> actualUserStories = userStoryService.getFriendsStory(userId);

		// Assert
		for (UserStory userStory : actualUserStories) {
			assertTrue(userStory.getActive());
		}
	}

	// Returns an empty list when the user ID is invalid or does not exist
	@Test
	public void test_getFriendsStory_returnsEmptyListWhenUserIdIsInvalidOrDoesNotExist() {
		// Arrange
		Long userId = 1L;
		List<Long> friendUserIds = Collections.emptyList();
		List<UserStory> expectedUserStories = Collections.emptyList();
		when(relationshipDao.findAllFriendUserIdByUserIdAndRelationshipStatus(userId, RelationshipStatus.ACCEPTED)).thenReturn(friendUserIds);

		// Act
		List<UserStory> actualUserStories = userStoryService.getFriendsStory(userId);

		// Assert
		assertEquals(expectedUserStories, actualUserStories);
	}

	// Returns an empty list when there are no UserStory objects for the given user ID and accepted relationships
	@Test
	public void test_getFriendsStory_returnsEmptyListWhenNoUserStoryObjectsForGivenUserIdAndAcceptedRelationships() {
		// Arrange
		Long userId = 1L;
		List<Long> friendUserIds = Arrays.asList(2L, 3L);
		List<UserStory> expectedUserStories = Collections.emptyList();
		when(relationshipDao.findAllFriendUserIdByUserIdAndRelationshipStatus(userId, RelationshipStatus.ACCEPTED)).thenReturn(friendUserIds);
		when(userStoryDao.findAllByUserIdInAndActive(friendUserIds, true)).thenReturn(expectedUserStories);

		// Act
		List<UserStory> actualUserStories = userStoryService.getFriendsStory(userId);

		// Assert
		assertEquals(expectedUserStories, actualUserStories);
	}

}