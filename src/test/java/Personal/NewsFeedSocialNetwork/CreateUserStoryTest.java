package Personal.NewsFeedSocialNetwork;
// Generated by CodiumAI

import Personal.NewsFeedSocialNetwork.dao.EventDao;
import Personal.NewsFeedSocialNetwork.dao.RelationshipDao;
import Personal.NewsFeedSocialNetwork.dao.UserStoryDao;
import Personal.NewsFeedSocialNetwork.enums.RelationshipStatus;
import Personal.NewsFeedSocialNetwork.model.UserStory;
import Personal.NewsFeedSocialNetwork.service.UserStoryService;
import java.util.Objects;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;

public class CreateUserStoryTest {

	private static final Integer DEFAULT_DURATION = 1;

	@Mock
	UserStoryDao userStoryDao;

	@InjectMocks
	UserStoryService userStoryService;

	@BeforeEach
	public void setUp() {
		MockitoAnnotations.initMocks(this); // Initialize Mockito annotations
	}


	// Create a user story with all required parameters and a default duration of 1.
	@Test
	public void test_createUserStory_defaultDuration() {
		// Arrange
		Long userId = 1L;
		Long eventId = 1L;
		String comment = "Test comment";
		Integer duration = null;

		when(userStoryDao.save(Mockito.any(UserStory.class))).thenReturn(UserStory.builder()
		                                                                          .userId(userId)
		                                                                          .eventId(eventId)
		                                                                          .comment(comment)
		                                                                          .duration(Objects.isNull(duration)?DEFAULT_DURATION:duration)
		                                                                          .active(true).build());

		// Act
		UserStory result = createUserStory(userId, eventId, comment, duration);

		// Assert
		assertNotNull(result);
		assertEquals(userId, result.getUserId());
		assertEquals(eventId, result.getEventId());
		assertEquals(comment, result.getComment());
		assertEquals(DEFAULT_DURATION, result.getDuration());
		assertTrue(result.getActive());
	}

	// Create a user story with all required parameters and a custom duration.
	@Test
	public void test_createUserStory_customDuration() {
		// Arrange
		Long userId = 1L;
		Long eventId = 1L;
		String comment = "Test comment";
		Integer duration = 5;

		when(userStoryDao.save(Mockito.any(UserStory.class))).thenReturn(UserStory.builder()
		                                                                          .userId(userId)
		                                                                          .eventId(eventId)
		                                                                          .comment(comment)
		                                                                          .duration(Objects.isNull(duration)?DEFAULT_DURATION:duration)
		                                                                          .active(true).build());
		// Act
		UserStory result = createUserStory(userId, eventId, comment, duration);

		// Assert
		assertNotNull(result);
		assertEquals(userId, result.getUserId());
		assertEquals(eventId, result.getEventId());
		assertEquals(comment, result.getComment());
		assertEquals(duration, result.getDuration());
		assertTrue(result.getActive());
	}

	// Create a user story with all required parameters and a null duration.
	@Test
	public void test_createUserStory_nullDuration() {
		// Arrange
		Long userId = 1L;
		Long eventId = 1L;
		String comment = "Test comment";
		Integer duration = null;

		when(userStoryDao.save(Mockito.any(UserStory.class))).thenReturn(UserStory.builder()
		                                                                          .userId(userId)
		                                                                          .eventId(eventId)
		                                                                          .comment(comment)
		                                                                          .duration(Objects.isNull(duration)?DEFAULT_DURATION:duration)
		                                                                          .active(true).build());
		// Act
		UserStory result = createUserStory(userId, eventId, comment, duration);

		// Assert
		assertNotNull(result);
		assertEquals(userId, result.getUserId());
		assertEquals(eventId, result.getEventId());
		assertEquals(comment, result.getComment());
		assertEquals(DEFAULT_DURATION, result.getDuration());
		assertTrue(result.getActive());
	}

	public UserStory createUserStory(Long userId, Long eventId, String comment, Integer duration) {
		UserStory story = UserStory.builder()
		                           .userId(userId)
		                           .eventId(eventId)
		                           .comment(comment)
		                           .duration(Objects.isNull(duration)?DEFAULT_DURATION:duration)
		                           .active(true).build();

		return userStoryDao.save(story);
	}
}