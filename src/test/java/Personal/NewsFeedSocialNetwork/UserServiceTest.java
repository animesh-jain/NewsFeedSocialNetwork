package Personal.NewsFeedSocialNetwork;
// Generated by CodiumAI

import Personal.NewsFeedSocialNetwork.dao.UserDao;
import Personal.NewsFeedSocialNetwork.model.Relationship;
import Personal.NewsFeedSocialNetwork.model.User;
import Personal.NewsFeedSocialNetwork.service.UserService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class UserServiceTest {


	@Mock
	UserDao userDao;

	@InjectMocks
	UserService userService;

	@BeforeEach
	public void setUp() {
		MockitoAnnotations.initMocks(this); // Initialize Mockito annotations
	}

	// createUser with valid name and email returns a User object
	@Test
	public void test_createUser_with_valid_name_and_email_returns_User_object() {
		// Arrange
		String name = "John Doe";
		String email = "johndoe@example.com";

		Mockito
			.when(userDao.save(Mockito.any(User.class))).thenReturn(User.builder()
			                                                            .name(name)
			                                                            .email(email)
			                                                            .active(true)
			                                                            .build());

		// Act
		User result = userService.createUser(name, email);

		// Assert
		assertNotNull(result);
		assertEquals(name, result.getName());
		assertEquals(email, result.getEmail());
		assertTrue(result.isActive());
	}

	// createUser with name and email containing maximum length strings returns a User object
	@Test
	public void test_createUser_with_maximum_length_strings_returns_User_object() {
		// Arrange
		String name = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed euismod, urna ac aliquam ultrices, nisl nunc tincidunt nunc, id lacinia nunc risus id nunc.";
		String email = "loremipsumdolorsitametconsecteturadipiscingelit@consectetur.com";

		Mockito
			.when(userDao.save(Mockito.any(User.class))).thenReturn(User.builder()
			                                                            .name(name)
			                                                            .email(email)
			                                                            .active(true)
			                                                            .build());
		// Act
		User result = userService.createUser(name, email);

		// Assert
		assertNotNull(result);
		assertEquals(name, result.getName());
		assertEquals(email, result.getEmail());
		assertTrue(result.isActive());
	}

	// createUser with name and email containing minimum length strings returns a User object
	@Test
	public void test_createUser_with_minimum_length_strings_returns_User_object() {
		// Arrange
		String name = "A";
		String email = "a@example.com";

		Mockito
			.when(userDao.save(Mockito.any(User.class))).thenReturn(User.builder()
			                                                            .name(name)
			                                                            .email(email)
			                                                            .active(true)
			                                                            .build());
		// Act
		User result = userService.createUser(name, email);

		// Assert
		assertNotNull(result);
		assertEquals(name, result.getName());
		assertEquals(email, result.getEmail());
		assertTrue(result.isActive());
	}

	// createUser with name and email containing non-ascii characters returns a User object
	@Test
	public void test_createUser_with_non_ascii_characters_returns_User_object() {
		// Arrange
		String name = "Jøhn Dœ";
		String email = "jøhndœ@example.com";

		Mockito
			.when(userDao.save(Mockito.any(User.class))).thenReturn(User.builder()
			                                                            .name(name)
			                                                            .email(email)
			                                                            .active(true)
			                                                            .build());
		// Act
		User result = userService.createUser(name, email);

		// Assert
		assertNotNull(result);
		assertEquals(name, result.getName());
		assertEquals(email, result.getEmail());
		assertTrue(result.isActive());
	}

}